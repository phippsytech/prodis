# Use the official PHP image as a base
FROM php:8.3-cli

# Install system dependencies
RUN apt-get update && apt-get install -y \
    libssl-dev \
    pkg-config \
    supervisor \
    git \
    unzip \
    libgmp-dev \
    inotify-tools \
    cron \
    && rm -rf /var/lib/apt/lists/*

# Install PHP extensions
RUN pecl install mongodb redis \
    && docker-php-ext-enable mongodb redis \
    && docker-php-ext-install mysqli pdo pdo_mysql sockets bcmath gmp \
    && docker-php-ext-enable mysqli

# Enable pcntl extension
RUN docker-php-ext-install pcntl

# Set PHP configuration
# RUN echo "memory_limit=512M" >> /usr/local/etc/php/conf.d/custom.ini && \
#     echo "post_max_size=50M" >> /usr/local/etc/php/conf.d/custom.ini && \
#     echo "upload_max_filesize=50M" >> /usr/local/etc/php/conf.d/custom.ini

# Set the working directory
WORKDIR /var/www/prodis


# Copy Composer from the Composer official image
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# This option is commonly used in docker, but I'm going to see if I can get away without it!
# ENV COMPOSER_ALLOW_SUPERUSER=1

# Copy the composer files first to leverage Docker cache
# COPY ./composer.json ./composer.lock ./
COPY ./composer.json ./

# Install Composer dependencies (without the --cache-dir option)
RUN composer install --no-dev --optimize-autoloader --prefer-dist --no-interaction --no-progress --no-scripts --ignore-platform-reqs



# Copy the necessary directories and files into the container
COPY ./api/ /var/www/prodis/api/
COPY ./src/ /var/www/prodis/src/
COPY ./servers/ /var/www/prodis/servers/
COPY ./templates/ /var/www/prodis/templates/
COPY ./webhooks/ /var/www/prodis/webhooks/
COPY ./init.php /var/www/prodis/init.php
COPY ./composer.json /var/www/prodis/composer.json
# COPY ./composer.lock /var/www/prodis/composer.lock
COPY ./autoload.php /var/www/prodis/autoload.php
COPY ./env.php /var/www/prodis/env.php
COPY ./watch_and_restart.sh /var/www/prodis/watch_and_restart.sh
COPY ./cron/ /cron/
COPY ./cron/cronjobs /etc/cron.d/cronjobs

# Copy supervisord configuration file
COPY supervisord.conf /etc/supervisor/conf.d/prodis.conf

# Set permissions for cronjobs and ensure newline
RUN chmod 0644 /etc/cron.d/cronjobs \
    && echo "" >> /etc/cron.d/cronjobs \  
    && crontab /etc/cron.d/cronjobs \
    && touch /var/log/cron.log


# Expose ports
EXPOSE 80
EXPOSE 8080
EXPOSE 443

# Command to run supervisord
#CMD ["supervisord"]


# Start supervisord, which will also start cron
CMD ["supervisord", "-c", "/etc/supervisor/conf.d/prodis.conf"]


# Start cron service and supervisord
# CMD ["sh", "-c", "cron && supervisord -c /etc/supervisor/conf.d/prodis.conf"]
